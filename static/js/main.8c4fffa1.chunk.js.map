{"version":3,"sources":["Canvas.js","NameForm.js","App.js","index.js"],"names":["Canvas","props","canvasRef","useRef","colors","draw","ctx","i","length","fillStyle","fillRect","useEffect","context","current","getContext","ref","width","height","NameForm","React","useState","value","setValue","hex","setHex","newHex","setNewHex","submitted","setSubmitted","handleSubmit","event","preventDefault","map","hexDisplay","aHex","onSubmit","type","onChange","target","string","chars","split","charCodeAt","toString","hex_chain","hex_chains","chain_length","count","concat","push","asciiHex","onClick","id","r","style","backgroundColor","makeHex","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oLA0BeA,EAxBA,SAAAC,GAEb,IAAMC,EAAYC,iBAAO,MAClBC,EAAUH,EAAVG,OAEDC,EAAO,SAAAC,GACX,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,IAC/BD,EAAIG,UAAYL,EAAOG,GACvBD,EAAII,SAAS,IAAIH,EAAG,EAAG,IAAK,MAYlC,OARAI,qBAAU,WACR,IACMC,EADSV,EAAUW,QACFC,WAAW,MAElCT,EAAKO,KAEJ,CAACP,IAEG,gDAAQU,IAAKb,GAAeD,GAA5B,IAAmCe,MAAO,IAAIZ,EAAOI,OAAQS,OAAO,UCuG9DC,MAvHf,WAAqB,IAAD,EACUC,IAAMC,SAAS,IADzB,mBACTC,EADS,KACFC,EADE,OAEMH,IAAMC,SAAS,CAAC,KAFtB,mBAETG,EAFS,KAEJC,EAFI,OAGYL,IAAMC,SAAS,CAAC,UAH5B,mBAGTK,EAHS,KAGDC,EAHC,OAIkBP,IAAMC,UAAS,GAJjC,mBAITO,EAJS,KAIEC,EAJF,KAYVC,EAAe,SAACC,GAClBA,EAAMC,iBAGN,IAAMN,EAASF,EAAIS,IAAIC,GAOT,KAAVZ,IACAK,EAAUD,GACVG,GAAa,KA+CrB,SAASK,EAAWC,GAChB,OAAOA,EAAK1B,QACR,KAAK,EAEL,KAAK,EACD,MAAO,QACX,QACI,MAAO,IAAM0B,GAKzB,OACI,gCACI,uBAAMC,SAAUN,EAAhB,UACI,uBAAOO,KAAK,OAAOf,MAAOA,EAAOgB,SAhFxB,SAACP,GAClBR,EAASQ,EAAMQ,OAAOjB,OACtBG,EA6BJ,SAAkBe,GAEd,IADA,IAAIC,EAAQD,EAAOE,MAAM,IAChBlC,EAAI,EAAGA,EAAIiC,EAAMhC,OAAQD,IAC9BiC,EAAMjC,GAAKgC,EAAOG,WAAWnC,GAAGoC,SAAS,IAI7C,IAAIC,EAAY,GACZC,EAAa,GACbC,EAAeN,EAAMhC,OACrBuC,EAAQ,EAEZ,KAAOD,EAAe,GAAG,CAErB,IADAA,GAAgB,GACG,EAMf,OALAF,EAAYA,EAAUI,OAAOR,EAAMO,KACb,IAAlBD,IACAF,EAAYA,EAAUI,OAAOR,EAAMO,EAAM,KAE7CF,EAAWI,KAAKL,GACTC,EAGX,IAAK,IAAItC,EAAIwC,EAAOxC,EAAIwC,EAAM,EAAGxC,IAC7BqC,EAAYA,EAAUI,OAAOR,EAAMjC,IAEvCsC,EAAWI,KAAKL,GAChBA,EAAY,GACZG,GAAS,EAGb,OAAOF,EA5DAK,CAASpB,EAAMQ,OAAOjB,WA+ErB,uBAAOe,KAAK,SAASf,MAAM,SAAS8B,QAAStB,OAEjD,wBAAOuB,GAAG,SAAV,UACI,gCACI,6BACK7B,EAAIS,KAAI,SAACqB,GAAD,OACR,6BAAKA,WAId,gCACA,6BACK9B,EAAIS,KAAI,SAACqB,GAAD,OAEL,6BAAI,qBAAKC,MAAO,CAAErC,OAAQ,QAASD,MAAO,QAASuC,gBAAiBtB,EAAWoB,kBAO3F,sBAAKD,GAAI,YAAT,UACI,wCA/EI,SAACtB,GAEb,GAAIH,EACA,OAAO,cAAC,EAAD,CAAQvB,OAAQqB,IA6ElB+B,UCvGFC,MAVf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,+CACA,wGACA,cAAC,EAAD,QCJNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.8c4fffa1.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react'\r\n\r\nconst Canvas = props => {\r\n  \r\n  const canvasRef = useRef(null)\r\n  const {colors} = props\r\n\r\n  const draw = ctx => {\r\n    for (let i = 0; i < colors.length; i++) {\r\n        ctx.fillStyle = colors[i]\r\n        ctx.fillRect(100*i, 0, 100, 150)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current\r\n    const context = canvas.getContext('2d')\r\n    \r\n    draw(context)\r\n\r\n  }, [draw])\r\n  \r\n  return <canvas ref={canvasRef} {...props} width={100*colors.length} height=\"150\" />\r\n\r\n}\r\n\r\nexport default Canvas","import React from 'react'\r\n\r\nimport './App.css';\r\nimport Canvas from './Canvas.js'\r\n\r\n\r\nfunction NameForm() {\r\n    const [value, setValue] = React.useState('');\r\n    const [hex, setHex] = React.useState(['']);\r\n    const [newHex, setNewHex] = React.useState(['white']);\r\n    const [submitted, setSubmitted] = React.useState(false);\r\n\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n        setHex(asciiHex(event.target.value));\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        //console.log(`A name was submited: ${value}`);\r\n        //console.log(hex)\r\n        const newHex = hex.map(hexDisplay)\r\n        /*\r\n        if (newHex[newHex.length-1] === \"white\") {\r\n            newHex.pop()\r\n        }\r\n        */\r\n        //console.log(newHex)\r\n        if (value !== \"\") {\r\n            setNewHex(newHex)\r\n            setSubmitted(true)\r\n        }\r\n        //console.log(`Submitted: ${submitted}`);\r\n        //document.getElementById(\"forCanvas\").innerHTML = <Canvas colors={newHex} />\r\n    }\r\n\r\n    const makeHex = (event) => {\r\n        \r\n        if (submitted) {\r\n            return <Canvas colors={newHex}/>\r\n        } \r\n    }\r\n    \r\n    function asciiHex(string) {\r\n        var chars = string.split('');\r\n        for (var i = 0; i < chars.length; i++) {\r\n            chars[i] = string.charCodeAt(i).toString(16); //decimal 2 ascii\r\n        }\r\n        // chars is an array of hex numbers\r\n\r\n        var hex_chain = '';\r\n        var hex_chains = [];\r\n        var chain_length = chars.length;\r\n        var count = 0;\r\n        \r\n        while (chain_length > 0) {\r\n            chain_length -= 3;\r\n            if (chain_length < 0) {\r\n                hex_chain = hex_chain.concat(chars[count]);\r\n                if (chain_length === -1) { \r\n                    hex_chain = hex_chain.concat(chars[count+1]);\r\n                }\r\n                hex_chains.push(hex_chain);\r\n                return hex_chains\r\n            }\r\n\r\n            for (let i = count; i < count+3; i++) {\r\n                hex_chain = hex_chain.concat(chars[i]);\r\n            }\r\n            hex_chains.push(hex_chain);\r\n            hex_chain = '';\r\n            count += 3;\r\n\r\n        }\r\n        return hex_chains;\r\n    } \r\n\r\n    function hexDisplay(aHex) {\r\n        switch(aHex.length) {\r\n            case 2:\r\n                return 'white'\r\n            case 4:\r\n                return 'white'\r\n            default:\r\n                return '#' + aHex\r\n            \r\n       }\r\n    }\r\n    \r\n    return (\r\n        <div> \r\n            <form onSubmit={handleSubmit}>\r\n                <input type=\"text\" value={value} onChange={handleChange}/>\r\n                <input type=\"button\" value=\"Submit\" onClick={handleSubmit}/>\r\n            </form>\r\n            <table id=\"cTable\">\r\n                <thead>\r\n                    <tr>\r\n                        {hex.map((r) => \r\n                        (<td>{r}</td>))}\r\n                    </tr>\r\n                </thead>\r\n                        \r\n                <tbody>\r\n                <tr>\r\n                    {hex.map((r) => \r\n                    (   \r\n                        <td><div style={{ height: '150px', width: '100px', backgroundColor: hexDisplay(r)}}/></td>\r\n                        //<td><img src={'https://dummyimage.com/100x150/'+ hexDisplay(r) +'/fff.jpg&text=+'}></img></td>\r\n                    ))}\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n            <div id =\"forCanvas\">\r\n                <h4>image:</h4>\r\n                {makeHex()}\r\n            </div>\r\n        </div>\r\n\r\n        \r\n    );\r\n}\r\n\r\nexport default NameForm;\r\n","import React, { useState } from 'react'\nimport NameForm from './NameForm.js'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>HEXFLAG MAKER</h1>\n      <p>Type in a word and get the hexflag of it (click submit to get an image)</p>\n      <NameForm />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}